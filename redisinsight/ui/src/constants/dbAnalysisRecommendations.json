{
  "luaScript": {
    "id": "luaScript",
    "title":"Avoid dynamic Lua script",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Refrain from generating dynamic scripts, which can cause your Lua cache to grow and get out of control. Memory is consumed as scripts are loaded. If you have to use dynamic Lua scripts, then remember to track your Lua memory consumption and flush the cache periodically with a SCRIPT FLUSH, also do not hardcode and/or programmatically generate key names in your Lua scripts because it makes them useless in a clustered Redis setup. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "useSmallerKeys": {
    "id": "useSmallerKeys",
    "title":"Use smaller keys",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Shorten key names to optimize memory usage. Though, in general, descriptive key names are always preferred, these large key names can eat a lot of the memory. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "bigHashes": {
    "id": "bigHashes",
    "title": "Shard big hashes to small hashes",
    "tutorial": "/quick-guides/document/working-with-hashes.md",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "If you have a hash with a large number of key, value pairs, and if each key, value pair is small enough - break it into smaller hashes to save memory. To shard a HASH table, choose a method of partitioning the data. Hashes themselves have keys that can be used for partitioning the keys into different shards. The number of shards is determined by the total number of keys to be stored and the shard size. Using this and the hash value you can determine the shard ID in which the key resides. Though converting big hashes to small hashes will increase the complexity of your code. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes", "configuration_changes"]
  },
  "avoidLogicalDatabases": {
    "id": "avoidLogicalDatabases",
    "title": "Avoid using logical databases",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Redis supports multiple logical databases within an instance, though these logical databases are neither independent nor isolated in any other way and can freeze each other."
      },
      {
        "id": "2",
        "type": "span",
        "value": "Also, they are not supported by any clustering system (open source or Redis Enterprise clustering), and some modules do not support numbered databases as well. "
      },
      {
        "id": "3",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "combineSmallStringsToHashes": {
    "id": "combineSmallStringsToHashes",
    "title": "Combine small strings to hashes",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Strings data type has an overhead of about 90 bytes on a 64-bit machine, so if there is no need for different expiration values for these keys, combine small strings into a larger hash to optimize the memory usage."
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "Also, ensure that the hash has less than hash-max-ziplist-entries elements and the size of each element is within hash-max-ziplist-values bytes."
      },
      {
        "id": "3",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "4",
        "type": "span",
        "value": "Though this approach should not be used if you need different expiration values for String keys. "
      },
      {
        "id": "5",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["code_changes"]
  },
  "increaseSetMaxIntsetEntries": {
    "id": "increaseSetMaxIntsetEntries",
    "title": "Increase the set-max-intset-entries",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Several set values with IntSet encoding exceed the set-max-intset-entries. Change the configuration in reds.conf to efficiently use the IntSet encoding."
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "Though increasing this value will lead to an increase in latency of set operations and CPU utilization."
      },
      {
        "id": "3",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "4",
        "type": "span",
        "value": "Run `INFO COMMANDSTATS` before and after making this change to verify the latency numbers. "
      },
      {
        "id": "5",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "hashHashtableToZiplist": {
  "id": "hashHashtableToZiplist",
  "title": "Increase hash-max-ziplist-entries",
  "content": [
    {
      "id": "1",
      "type": "span",
      "value": "If any value for a key exceeds hash-max-ziplist-entries, it is stored automatically as a Hashtable instead of a Ziplist, which consumes almost double the memory. So to save memory, increase the configurations and convert your hashtables to ziplist. The trade-off can be an increase in latency and possibly an increase in CPU utilization. "
    },
    {
      "id": "2",
      "type": "link",
      "value": {
        "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
        "name": "Read more"
      }
    }
  ],
  "badges": ["configuration_changes"]
},
  "compressHashFieldNames": {
    "id": "compressHashFieldNames",
    "title": "Compress Hash field names",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Hash field name also consumes memory, so use smaller or shortened field names to reduce memory usage. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "compressionForList": {
    "id": "compressionForList",
    "title": "Enable compression for the list",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "If you use long lists, and mostly access elements from the head and tail only, then you can enable compression."
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "Set list-compression-depth=1 in redis.conf to compress every list node except the head and tail of the list. Though list operations that involve elements in the center of the list will get slower, the compression can increase CPU utilization."
      },
      {
        "id": "3",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "4",
        "type": "span",
        "value": "Run `INFO COMMANDSTATS` before and after making this change to verify the latency numbers. "
      },
      {
        "id": "5",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "bigStrings": {
    "id": "bigStrings",
    "title": "Do not store large strings",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Avoid storing large strings, since transferring them takes time and consumes the network bandwidth. Large keys are acceptable only to read/write portions of the string. "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "zSetHashtableToZiplist": {
    "id": "zSetHashtableToZiplist",
    "title": "Convert hashtable to ziplist for sorted sets",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Increase zset-max-ziplist-entries"
      },
      {
        "id": "2",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "3",
        "type": "span",
        "value": "If any value for a key exceeds zset-max-ziplist-entries, it is stored automatically as a Hashtable instead of a Ziplist, which consumes almost double the memory. So to save memory, increase the configurations and convert your hashtables to ziplist. The trade-off can be an increase in latency and possibly an increase in CPU utilization. "
      },
      {
        "id": "4",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "bigSets": {
    "id": "bigSets",
    "title": "Switch to Bloom filter, cuckoo filter, or HyperLogLog",
    "tutorial": "/redis_stack/probabilistic_data_structures.md",
    "redisStack": true,
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "If you are using large "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://redis.io/docs/data-types/sets/",
          "name": "sets"
        }
      },
      {
        "id": "3",
        "type": "span",
        "value": " to solve one of the following problems:"
      },
      {
        "id": "4",
        "type": "list",
        "value": [
          [
            {
              "id": "1",
              "type": "span",
               "value": "Count the number of unique observations in a stream"
            }
          ],
          [
            {
              "id": "2",
              "type": "span",
              "value": "Check if an observation already appeared in the stream"
            }
          ],
          [
            {
              "id": "3",
              "type": "span",
              "value": "Find the fraction or the number of observations in the stream that are smaller or larger than a given value"
            }
          ]
        ]
      },
      {
        "id": "5",
        "type": "span",
        "value": "and you are ready to trade accuracy with speed and memory usage, consider using one of the following probabilistic data structures:"
      },
      {
        "id": "6",
        "type": "list",
        "value": [
          [
            {
              "id": "1",
              "type": "link",
              "value": {
                "href": "https://redis.io/docs/data-types/hyperloglogs/",
                "name": "HyperLogLog"
              }
            },
            {
              "id": "2",
              "type": "span",
               "value": " can be used for estimating the number of unique observations in a set."
            }
          ],
          [
            {
              "id": "1",
              "type": "link",
              "value": {
                "href": "https://redis.io/docs/stack/bloom/",
                "name": "Bloom filter or cuckoo filter"
              }
            },
            {
              "id": "2",
              "type": "span",
               "value": " can be used for checking if an observation has already appeared in the stream (false positive matches are possible, but false negatives are not)."
            }
          ],
          [
            {
              "id": "1",
              "type": "link",
              "value": {
                "href": "https://redis.io/docs/stack/bloom/",
                "name": "t-digest"
              }
            },
            {
              "id": "2",
              "type": "span",
               "value": " can be used for estimating the fraction or the number of observations in the stream that are smaller or larger than a given value."
            }
          ]
        ]
      },
      {
        "id": "7",
        "type": "span",
        "value": "Bloom filter and cuckoo filter require "
      },
      {
        "id": "8",
        "type": "link",
        "value": {
          "href": "https://redis.com/modules/redis-bloom/",
          "name": "RedisBloom"
        }
      },
      {
        "id": "9",
        "type": "span",
        "value": ". "
      },
      {
        "id": "10",
        "type": "link",
        "value": {
          "href": "https://docs.redis.com/latest/ri/memory-optimizations/",
          "name": "Read more"
        }
      },
      {
        "id": "11",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "12",
        "type": "span",
        "value": "Create a "
      },
      {
        "id": "13",
        "type": "link",
        "value": {
          "href": "https://redis.com/try-free/?utm_source=redis&utm_medium=app&utm_campaign=redisinsight_recommendations/",
          "name": "free Redis Stack database"
        }
      },
      {
        "id": "14",
        "type": "span",
        "value": " to use modern data models and processing engines."
      }
    ],
    "badges": ["configuration_changes"]
  },
  "bigAmountOfConnectedClients": {
    "id": "bigAmountOfConnectedClients",
    "title": "Don't open a new connection for every request / every command",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "When the value of your connected_clients is high, it usually means that your application is opening and closing a connection for every request it makes. Opening a connection is an expensive operation that adds to both client and server latency."
      },
      {
        "id": "2",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "2",
        "type": "paragraph",
        "value": "To rectify this, consult your Redis client’s documentation and configure it to use persistent connections."
      }
    ],
    "badges": ["code_changes"]
  },
  "setPassword": {
    "id": "setPassword",
    "title": "Set the password",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "Protect your database by setting a password and using the "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://redis.io/commands/auth/",
          "name": "AUTH"
        }
      },
      {
        "id": "3",
        "type": "span",
        "value": " command to authenticate the connection. "
      },
      {
        "id": "4",
        "type": "link",
        "value": {
          "href": "https://redis.io/docs/management/security/",
          "name": "Read more"
        }
      }
    ],
    "badges": ["configuration_changes"]
  },
  "RTS": {
    "id": "RTS",
    "title":"Optimize the use of time series",
    "redisStack": true,
    "tutorial": "/redis_stack/redis_for_time_series.md",
    "content": [
      {
        "id": "1",
        "type": "span",
        "value": "If you are using sorted sets to work with time series data, consider using "
      },
      {
        "id": "2",
        "type": "link",
        "value": {
          "href": "https://redis.io/docs/stack/timeseries/",
          "name": "RedisTimeSeries"
        }
      },
      {
        "id": "3",
        "type": "span",
        "value": " to optimize the memory usage while having extraordinary query performance and small overhead during ingestion."
      },
      {
        "id": "4",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "5",
        "type": "span",
        "value": "Create a "
      },
      {
        "id": "6",
        "type": "link",
        "value": {
          "href": "https://redis.com/try-free/?utm_source=redis&utm_medium=app&utm_campaign=redisinsight_recommendations/",
          "name": "free Redis Stack database"
        }
      },
      {
        "id": "7",
        "type": "span",
        "value": " to use modern data models and processing engines."
      }
    ],
    "badges": ["configuration_changes"]
  },
  "redisVersion": {
    "id": "redisVersion",
    "title":"Update Redis database",
    "redisStack": true,
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Newer versions of Redis (starting from 6.0) have performance and resource utilization improvements, as well as the improved active, expire cycle to evict the keys faster."
      },
      {
        "id": "2",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "3",
        "type": "span",
        "value": "Create a "
      },
      {
        "id": "4",
        "type": "link",
        "value": {
          "href": "https://redis.com/try-free/?utm_source=redis&utm_medium=app&utm_campaign=redisinsight_recommendations/",
          "name": "free Redis Stack database"
        }
      },
      {
        "id": "5",
        "type": "span",
        "value": " which extends the core capabilities of Redis OSS and provides a complete developer experience for debugging and more."
      }
    ],
    "badges": ["upgrade"]
  },
  "redisSearch": {
    "id": "redisSearch",
    "title": "Optimize your query and search experience",
    "redisStack": true,
    "tutorial": "/redis_stack/working_with_json.md",
    "content": [
      {
        "id": "1",
        "type": "link",
        "value": {
          "href": "https://redis.io/docs/stack/search/",
          "name": "RediSearch"
        }
      },
      {
        "id": "2",
        "type": "span",
        "value": " was designed to help address your query needs and support a better development experience when dealing with complex data scenarios. Take a look at the "
      },
      {
        "id": "3",
        "type": "link",
        "value": {
          "href": "https://redis.io/commands/?name=Ft",
          "name": "powerful API options"
        }
      },
      {
        "id": "4",
        "type": "span",
        "value": " and try them. Supports full-text search, wildcards, fuzzy logic, and more."
      },
      {
        "id": "5",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "6",
        "type": "span",
        "value": "Create a "
      },
      {
        "id": "7",
        "type": "link",
        "value": {
          "href": "https://redis.com/try-free/?utm_source=redis&utm_medium=app&utm_campaign=redisinsight_recommendations/",
          "name": "free Redis Stack database"
        }
      },
      {
        "id": "8",
        "type": "span",
        "value": " which extends the core capabilities of Redis OSS and uses modern data models and processing engines."
      }
    ],
    "badges": ["upgrade"]
  },
  "searchIndexes": {
    "id": "searchIndexes",
    "title":"Enhance your search indexes",
    "redisStack": true,
    "tutorial": "/quick-guides/document/working-with-hashes.md",
    "content": [
      {
        "id": "1",
        "type": "paragraph",
        "value": "Creating your own index structure manually? Consider the out-of-box option of FT.CREATE on RediSearch."
      },
      {
        "id": "2",
        "type": "span",
        "value": "RediSearch was designed to help meet your query needs and support a better development experience when dealing with complex data scenarios. Take a look at the powerful API options "
      },
      {
        "id": "3",
        "type": "link",
        "value": {
          "href": "https://redis.io/commands/?name=Ft",
          "name": "here"
        }
      },
      {
        "id": "4",
        "type": "span",
        "value": " and try it."
      },
      {
        "id": "5",
        "type": "spacer",
        "value": "l"
      },
      {
        "id": "6",
        "type": "span",
        "value": "Create a "
      },
      {
        "id": "7",
        "type": "link",
        "value": {
          "href": "https://redis.com/try-free/?utm_source=redis&utm_medium=app&utm_campaign=redisinsight_recommendations/",
          "name": "free Redis Stack database"
        }
      },
      {
        "id": "8",
        "type": "span",
        "value": " to use modern data models and processing engines."
      }
    ],
    "badges": ["upgrade"]
  }
}
